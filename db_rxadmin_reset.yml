---
- name: reset root/postgres/master password on instances daily
  hosts: all
  tasks:
    - name: connect to account
      amazon.aws.sts_assume_role:
        region: us-east-1
        role_arn: "arn:aws:iam::1234512341:role/ansible_dba_management"
        role_session_name: "admin_reset"
      register: assumed_role_accountname
    
    - name: get accountname rds instance details
      amazon.aws.rds_instance_info:
        region: us-east-1
        access_key: "{{ assumed_role_accountname.sts_creds.access_key }}"
        secret_key: "{{ assumed_role_accountname.sts_creds.secret_key }}"
        session_token: "{{ assumed_role_accountname.sts_creds.session_token }}"
      register: accountname_instances

    - name: get accountname rds cluster details
      amazon.aws.rds_cluster_info:
        region: us-east-1
        access_key: "{{ assumed_role_accountname.sts_creds.access_key }}"
        secret_key: "{{ assumed_role_accountname.sts_creds.secret_key }}"
        session_token: "{{ assumed_role_accountname.sts_creds.session_token }}"
      register: accountname_clusters

    - name: filter out stopped instances/clusters
      ansible.builtin.set_fact: 
        accountname_instance_check: "{{ accountname_instances.instances | selectattr('db_instance_status', 'eq', 'available') }}"
        accountname_clusters_check: "{{ accountname_clusters.clusters | selectattr('status', 'eq', 'available') }}"

    - name: set var for identifier for accountname instances and clusters
      ansible.builtin.set_fact:
        accountname_instance_list: "{{ accountname_instance_check | selectattr('db_cluster_identifier', 'undefined') | map(attribute='db_instance_identifier') | list }}"
        accountname_cluster_list: "{{ accountname_clusters_check | map(attribute='db_cluster_identifier') | list }}"

    - name: generate RDS master password for instances
      ansible.builtin.set_fact:
        accountname_int_pass: "{{ lookup('community.general.random_string', special=false, numbers=true, length=20) }}"
      with_items: "{{ accountname_instance_list }}"
      loop_control:
        index_var: accountname_instance_index
      no_log: true
        
    - name: generate RDS master password for clusters  
      ansible.builtin.set_fact:
        accountname_cluster_pass: "{{ lookup('community.general.random_string', special=false, numbers=true, length=20) }}"
      with_items: "{{ accountname_cluster_list }}"
      loop_control:
        index_var: accountname_cluster_index
      no_log: true

    - block:
      - name: reset root/postgres/master password for accountname clusters
        amazon.aws.rds_cluster:
          region: us-east-1
          access_key: "{{ assumed_role_accountname.sts_creds.access_key }}"
          secret_key: "{{ assumed_role_accountname.sts_creds.secret_key }}"
          session_token: "{{ assumed_role_accountname.sts_creds.session_token }}"
          id: '{{ item }}'
          state: present
          force_update_password: true
          master_user_password: "{{ accountname_cluster_pass }}"
          apply_immediately: true
        with_items: "{{ accountname_cluster_list }}"
        when: accountname_cluster_list is defined
      - name: reset root/postgres/master password for accountname instances
        amazon.aws.rds_instance:
          region: us-east-1
          access_key: "{{ assumed_role_accountname.sts_creds.access_key }}"
          secret_key: "{{ assumed_role_accountname.sts_creds.secret_key }}"
          session_token: "{{ assumed_role_accountname.sts_creds.session_token }}"
          id: '{{ item }}'
          state: present
          force_update_password: true
          master_user_password: "{{ accountname_int_pass }}"
          apply_immediately: true
        with_items: "{{ accountname_instance_list }}"
        when: accountname_instance_list is defined
      rescue:
      - name: send notification via teams when password reset fails for accountname
        community.general.office_365_connector_card:
          webhook: "{{ webhook }}"
          title: "Password Reset for accountname clusters/instances failed"
          summary: "Reset Failed-check job"
          text: "Check job {{ tower_job_id }} for password reset failure"
