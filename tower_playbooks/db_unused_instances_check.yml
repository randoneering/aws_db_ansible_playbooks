---
- name: Check unused instances 
  hosts: all
  vars:
    tag_query1: "[?tags.Unused == 'True'].db_instance_identifier"
    tag_query2: "[?tags.Unused == 'True'].db_cluster_identifier"
  tasks:
    - name: Set role credentials as environment variables 
      amazon.aws.sts_assume_role:
        role_arn: arn:aws:iam::account:role/ansible_management
        role_session_name: unused_instance_check
      register: assume_role_account

    - name: get account rds instance details
      amazon.aws.rds_instance_info:
        region: us-east-1
        access_key: "{{ assume_role_account.sts_creds.access_key }}"
        secret_key: "{{ assume_role_account.sts_creds.secret_key }}"
        session_token: "{{ assume_role_account.sts_creds.session_token }}"
      register: account_instance

    - name: filter out docdb and non_aurora instances in instances
      ansible.builtin.set_fact:
        account_instances: "{{ account_instance.instances | selectattr('engine', 'search', '^(?!aurora|docdb)') }}"

    - name: filter out stopped instances
      ansible.builtin.set_fact: 
        account_instances_avail: "{{ account_instances | selectattr('db_instance_status', 'eq', 'available') }}"

    - name: filter Unused instances
      ansible.builtin.set_fact:
        account_instances_unused: "{{ account_instances_avail | json_query(tag_query1) }}"

    - name: get account rds cluster details
      amazon.aws.rds_cluster_info:
        region: us-east-1
        access_key: "{{ assume_role_account.sts_creds.access_key }}"
        secret_key: "{{ assume_role_account.sts_creds.secret_key }}"
        session_token: "{{ assume_role_account.sts_creds.session_token }}"
      register: account_cluster

    - name: filter out stopped clusters
      ansible.builtin.set_fact: 
        account_clusters_avail: "{{ account_cluster.clusters | selectattr('status', 'eq', 'available') }}"    

    - name: filter out Unused clusters
      ansible.builtin.set_fact:
        account_clusters_unused: "{{ account_clusters_avail | json_query(tag_query2) }}"
    - block:
      - name: shutdown clusters
        amazon.aws.rds_cluster:
          region: us-east-1
          access_key: "{{ assume_role_account.sts_creds.access_key }}"
          secret_key: "{{ assume_role_account.sts_creds.secret_key }}"
          session_token: "{{ assume_role_account.sts_creds.session_token }}"
          db_cluster_identifier: '{{ item }}'
          state: stopped
          wait: false
        with_items: "{{ account_clusters_unused }}"
        when: account_clusters_unused is defined
        register: account_clusters_shutdown
      - name: shutdown instances
        amazon.aws.rds_instance:
          region: us-east-1
          access_key: "{{ assume_role_account.sts_creds.access_key }}"
          secret_key: "{{ assume_role_account.sts_creds.secret_key }}"
          session_token: "{{ assume_role_account.sts_creds.session_token }}"
          db_instance_identifier: '{{ item }}'
          state: stopped
          wait: false
        with_items: "{{ account_instances_unused }}"
        when: account_instances_unused is defined 
        register: account_instances_shutdown
      rescue:
      - name: send notification via teams email 
        ansible.builtin.mail:
          host: your.smtp.server
          port: 25
          from: service@randoneering.tech
          to: "{{ channel_email }}"
          subtype: html
          subject: "Unused Instance playbook failed for account"
          body: "Check job {{ tower_job_id }} for unused playbook failure"

    - name: Run AWS CLI command with assumed role account
      shell: aws support describe-trusted-advisor-check-result --check-id Ti39halfu8 --output json
      environment:
        AWS_ACCESS_KEY_ID: "{{ assume_role_account.sts_creds.access_key }}"
        AWS_SECRET_ACCESS_KEY: "{{ assume_role_account.sts_creds.secret_key }}"
        AWS_SESSION_TOKEN: "{{ assume_role_account.sts_creds.session_token }}" 
      register: account_trusted_advisor_result

    - name: Extract metadata(account)
      set_fact:
        account_results: "{{ account_trusted_advisor_result.stdout }}"

    - name: Further Extract(account)
      set_fact:
        account_results_instances: "{{ account_results.result.flaggedResources | json_query('[*].metadata[1]') }}"

    - name: Filter out stopped instances
      ansible.builtin.set_fact: 
        account_instances_stopped: "{{ account_instances | selectattr('db_instance_status', 'eq', 'stopped') | map(attribute='db_instance_identifier') | list}}"
        account_clusters_stopped: "{{ account_cluster.clusters | selectattr('status', 'eq', 'stopped') | map(attribute='db_cluster_identifier') | list}}"

    - name: Render HTML template
      ansible.builtin.template:
        src: instances.html.j2
        dest: /your/template/instances.html

    - name: Read the File Content
      ansible.builtin.slurp:
        src: /your/template/instances.html
      register: email_content

    - name: Convert to string
      ansible.builtin.set_fact:
        email_body: "{{ email_content.content | b64decode }}"

    - name: send notification via teams email 
      ansible.builtin.mail:
        host: your.smtp.server
        port: 25
        from: service@randoneering.tech
        to: "{{ channel_email }}"
        subtype: html
        subject: "Unused Instances Check"
        body: "{{ email_body }}"



