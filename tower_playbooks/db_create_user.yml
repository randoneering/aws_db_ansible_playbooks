---
- name: Playbook to create users for mysql and postgres
  hosts: all
  vars:
  tasks:
    - name: generate password for mysql user(RO)
      ansible.builtin.set_fact:
        mysql_user_ro_pass: "{{ lookup('community.general.random_string', special=false, numbers=true, length=20) }}"
      when: mysql_user_ro != None
      no_log: true

    - name: generate password for mysql user (RW)
      ansible.builtin.set_fact:
        mysql_user_rw_pass: "{{ lookup('community.general.random_string', special=false, numbers=true, length=20) }}"
      when: mysql_user_rw != None
      no_log: true

    - name: create read only user (mysql)
      community.mysql.mysql_user:
        login_host: "{{ db_host_mysql }}"
        login_user: "{{ db_username }}"
        login_password: "{{ db_password }}"
        name: "{{ mysql_user_ro }}"
        host: "{{ item.host }}"
        password: "{{ mysql_user_ro_pass }}"
        priv: 
          '{{ mysql_db }}.*': 'USAGE'
          '{{ mysql_db }}.*': 'SELECT, SHOW VIEW'
      with_items:
      - { host: "10.%" } # In case you want to lock down where the user can connect from, match your host range here
      when: mysql_user_ro != None

    - name: create readwrite user (mysql)
      community.mysql.mysql_user:
        login_host: "{{ db_host_mysql }}"
        login_user: "{{ db_username  }}"
        login_password: "{{ db_password }}"
        name: "{{ mysql_user_rw }}"
        host: "{{ item.host }}"
        password: "{{ mysql_user_rw_pass }}"
        priv: 
          '{{ mysql_db }}.*': 'USAGE'
          '{{ mysql_db }}.*': 'SELECT, INSERT, UPDATE, DELETE, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, SHOW VIEW'
      with_items:
      - { host: "10.%" }
      when: mysql_user_rw != None

    - name: generate password for postgres user(RO)
      ansible.builtin.set_fact:
        pg_user_ro_pass: "{{ lookup('community.general.random_string', special=false, numbers=true, length=20) }}"
      when: pg_user_ro != None
      no_log: true

    - name: generate password for postgres user (RW)
      ansible.builtin.set_fact:
        pg_user_rw_pass: "{{ lookup('community.general.random_string', special=false, numbers=true, length=20) }}"
      when: pg_user_rw != None
      no_log: true

    - name: create postgres user (RO)
      community.postgresql.postgresql_user:
        login_host: "{{ db_host_pg }}"
        login_user: "{{ db_username }}"
        login_password: "{{ db_password }}"
        db: "{{ pg_db }}"
        name: "{{ pg_user_ro }}"
        password: "{{ pg_user_ro_pass }}"
      when: pg_user_ro != None

    - name: create postgres user (RW)
      community.postgresql.postgresql_user:
        login_host: "{{ db_host_pg }}"
        login_user: "{{ db_username }}"
        login_password: "{{ db_password }}"
        db: "{{ pg_db }}"
        name: "{{ pg_user_rw }}"
        password: "{{ pg_user_rw_pass }}"
      when: pg_user_rw != None
        
    - name: grants for RO postgres user
      community.postgresql.postgresql_membership:
        login_host: "{{ db_host_pg }}"
        login_user: "{{ db_username }}"
        login_password: "{{ db_password }}"
        group: readonly # This is a role I created myself, you will need to create your own read only role
        target_role: "{{ pg_user_ro }}"
      when: pg_user_ro != None

    - name: grants for RW postgres user
      community.postgresql.postgresql_privs:
        login_host: "{{ db_host_pg }}"
        login_user: "{{ db_username }}"
        login_password: "{{ db_password }}"
        group: readwrite # This is a role I created myself, you will need to create your own read write
        target_role: "{{ pg_user_rw }}"
      when: pg_user_rw != None

    - name: send email with credentials (mysql_ro)
      community.general.mail:
        host: # Your smtp server/relay
        port: 25 # or 587
        to: "{{ email }}"
        from: #your desired email for credentials to come from
        subject: 'Credentials for requested DB Access {{ jira_ticket }}'
        body: |
          credentials for {{ jira_ticket }}
          user: {{ mysql_user_ro }}
          password: {{ mysql_user_ro_pass }}
          endpoint: {{ endpoint }}
      when: mysql_user_ro != None


    - name: send email with credentials (mysql_rw)
      community.general.mail:
        host: # Your smtp server/relay
        port: 25 # or 587
        to: "{{ email }}"
        from: #your desired email for credentials to come from
        subject: 'Credentials for requested DB Access {{ jira_ticket }}'
        body: |
          credentials for {{ jira_ticket }}
          user: {{ mysql_user_rw }}
          password: {{ mysql_user_rw_pass }}
          endpoint: {{ endpoint }}
      when: mysql_user_rw != None

    - name: send email with credentials (pg_readonly)
      community.general.mail:
        host: # Your smtp server/relay
        port: 25 # or 587
        to: "{{ email }}"
        from: #your desired email for credentials to come from
        subject: 'Credentials for requested DB Access {{ jira_ticket }}'
        body: |
          credentials for {{ jira_ticket }}
          user: {{ pg_user_ro }}
          password: {{ pg_user_ro_pass }}
          endpoint: {{ endpoint }}
      when: pg_user_ro != None

    - name: send email with credentials (pg_readwrite)
      community.general.mail:
        host: # Your smtp server/relay
        port: 25 # or 587
        to: "{{ email }}"
        from: #your desired email for credentials to come from
        subject: 'Credentials for requested DB Access {{ jira_ticket }}'
        body: |
          credentials for {{ jira_ticket }}
          user: {{ pg_user_rw }}
          password: {{ pg_user_rw_pass }}
          endpoint: {{ endpoint }}
      when: pg_user_rw != None