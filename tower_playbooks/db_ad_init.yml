---
- name: Enable AD for RDS Instances/Clusters
  hosts: all
  tasks:
    - name: connect to account
      amazon.aws.sts_assume_role:
        region: us-east-1
        role_arn: "arn:aws:iam::acount#:role/ansible_management"
        role_session_name: "enable_ad"
      register: assumed_role_account

    - name: get account rds instance details
      amazon.aws.rds_instance_info:
        region: us-east-1
        access_key: "{{ assumed_role_account.sts_creds.access_key }}"
        secret_key: "{{ assumed_role_account.sts_creds.secret_key }}"
        session_token: "{{ assumed_role_account.sts_creds.session_token }}"
      register: account_instance

    - name: filter out docdb and non_aurora instances in instances
      ansible.builtin.set_fact:
        account_instances: "{{ account_instance.instances | selectattr('engine', 'search', '^(?!aurora|docdb)') }}"

    - name: filter out stopped instances
      ansible.builtin.set_fact: 
        account_instances_avail: "{{ account_instances | selectattr('db_instance_status', 'eq', 'available') }}"

    - name: get account rds cluster details
      amazon.aws.rds_cluster_info:
        region: us-east-1
        access_key: "{{ assumed_role_account.sts_creds.access_key }}"
        secret_key: "{{ assumed_role_account.sts_creds.secret_key }}"
        session_token: "{{ assumed_role_account.sts_creds.session_token }}"
      register: account_cluster

    - name: filter out docdb in clusters
      ansible.builtin.set_fact:
        account_clusters: "{{ account_cluster.clusters | selectattr('engine', 'search', 'aurora') }}"

    - name: filter out stopped clusters
      ansible.builtin.set_fact: 
        account_clusters_avail: "{{ account_clusters | selectattr('status', 'eq', 'available') }}"

    - name: set var for identifier for account instances and clusters
      ansible.builtin.set_fact:
        account_instance_list: "{{ account_instances_avail | selectattr('db_cluster_identifier', 'undefined') | map(attribute='db_instance_identifier') | list }}"
        account_cluster_list: "{{ account_clusters_avail | map(attribute='db_cluster_identifier') | list }}"

    - block:
      - name: enable AD for account clusters
        amazon.aws.rds_cluster:
          region: us-east-1
          access_key: "{{ assumed_role_account.sts_creds.access_key }}"
          secret_key: "{{ assumed_role_account.sts_creds.secret_key }}"
          session_token: "{{ assumed_role_account.sts_creds.session_token }}"
          id: '{{ item }}'
          state: present
          domain: "yourdomain-id"
          domain_iam_role_name: rds-directoryservice-kerberos-access-role # Default kerberos role that can be created based off AWS Documentation on Enabling Kerberos Auth for Databases
          purge_tags: false
          apply_immediately: true
        with_items: "{{ account_cluster_list }}"
        when: account_cluster_list is defined
        register: account_clusters_after
      - name: enable AD for account target instances
        amazon.aws.rds_instance:
          region: us-east-1
          access_key: "{{ assumed_role_account.sts_creds.access_key }}"
          secret_key: "{{ assumed_role_account.sts_creds.secret_key }}"
          session_token: "{{ assumed_role_account.sts_creds.session_token }}"
          id: '{{ item }}'
          state: present
          domain: "yourdomain-id"
          domain_iam_role_name: rds-directoryservice-kerberos-access-role # Default kerberos role that can be created based off AWS Documentation on Enabling Kerberos Auth for Databases
          purge_tags: false
          apply_immediately: true
        with_items: "{{ account_instance_list }}"
        when: account_instance_list is defined 
        register: account_instances_after