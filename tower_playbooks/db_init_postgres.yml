---
- name: DB Initialization for New Instance
  hosts: all
  tasks:
    - name: Recreate Public Schema
      community.postgresql.postgresql_query:
        login_host: "{{ target_db_instance }}"
        login_user: "{{ db_username }}"
        login_password: "{{ db_password }}"
        db: "{{ target_db_name }}"
        query:
        - drop schema public
        - create schema public authorization rds_superuser
        - revoke all privileges on schema public from public 
      

    - name: Create DBA role
      community.postgresql.postgresql_query:
        login_host: "{{ target_db_instance }}"
        login_user: "{{ db_username }}"
        login_password: "{{ db_password }}"
        db: "{{ target_db_name }}"
        query: 
        - do $block$
          declare
             _missing bool;
          begin
              select (count(*) filter (where rolname = 'dba')) = 0 into strict _missing from pg_roles;
              if _missing then
                 create role dba CREATEDB CREATEROLE LOGIN;
                 grant rds_superuser to dba;
              end if
              ;
          end;
          $block$;
  
    - name: Create DBA Schema
      community.postgresql.postgresql_query:
       login_host: "{{ target_db_instance }}"
       login_user: "{{ db_username }}"
       login_password: "{{ db_password }}"
       db: "{{ target_db_name }}"
       query:
        - grant dba to admin, svc_db_ansible # 'admin' can be the name of your root/postgres user. I suggest changing the name to something unique. svc_db_ansible is just a service user I use
        - create schema if not exists dba authorization dba 
        - revoke dba from admin, svc_db_ansible;
    
    - name: Create Schema and Application login_user
      community.postgresql.postgresql_query:
        login_host: "{{ target_db_instance }}"
        login_user: "{{ db_username }}"
        login_password: "{{ db_password }}"
        db: "{{ target_db_name }}"
        query:
        - do $block$
          declare
              _missing bool;
          begin
              select (count(*) filter (where usename = '{{ app_username }}')) = 0 into strict _missing from pg_user;
              if _missing then
                  create user {{ app_username }} with password '{{ app_username_password }}';
              else
                  alter user {{ app_username }} with password '{{ app_username_password }}';
              end if
              ;
          end;
          $block$
          ;        
        - grant {{ app_username }} to svc_db_ansible
        - create schema if not exists Application authorization {{ app_username }}
        - alter user {{ app_username }} set search_path to Application
        named_args:
          app_username: "{{ app_username }}"
          app_username_password: "{{ app_username_password }}"


    - name: Rights for App user
      community.postgresql.postgresql_query:
        login_host: "{{ target_db_instance }}"
        login_user: "{{ db_username }}"
        login_password: "{{ db_password }}"
        db: "{{ target_db_name }}"
        query:
        - alter database "{{ target_db_name }}" owner to {{ app_username }}
        - grant connect on database "{{ target_db_name }}" to {{ app_username }}
        - grant usage on schema Application to {{ app_username }}
        - grant create on database "{{ target_db_name }}" to {{ app_username }}
        - grant execute on all functions in schema Application to {{ app_username }}
        - grant execute on all procedures in schema Application to {{ app_username }}
        - grant all privileges on all sequences in schema Application to {{ app_username }}
        - grant select, insert, update, truncate, delete on all tables in schema Application to {{ app_username }}
        named_args:
          app_username: "{{ app_username }}"
    
    - name: Create readonly and readwrite roles 
      community.postgresql.postgresql_query:
        login_host: "{{ target_db_instance }}"
        login_user: "{{ db_username }}"
        login_password: "{{ db_password }}"
        db: "{{ target_db_name }}"
        query:
        - do $block$
          declare
             _missing bool;
          begin
              select (count(*) filter (where rolname = 'readonly')) = 0 into strict _missing from pg_roles;
              if _missing then
                 create role readonly nologin;
              end if
              ;
          end;
          $block$;
        - do $block$
          declare
             _missing bool;
          begin
              select (count(*) filter (where rolname = 'readwrite')) = 0 into strict _missing from pg_roles;
              if _missing then
                 create role readwrite nologin;
              end if
              ;
          end;
          $block$;
        named_args:
          app_username: "{{ app_username }}"

    - name: Grant privileges to readonly and readwrite user
      community.postgresql.postgresql_query:
        login_host: "{{ target_db_instance }}"
        login_user: "{{ db_username }}"
        login_password: "{{ db_password }}"
        db: "{{ target_db_name }}"
        query:
        - grant usage on schema Application to readonly, readwrite;
        - grant select on all tables in schema Application to readonly, readwrite
        - grant insert, update, delete on all tables in schema Application to readwrite
        - grant all privileges on all sequences in schema Application to readwrite
        - grant execute on all functions in schema Application to readwrite

    - name: Set default privileges for Application user and roles
      community.postgresql.postgresql_query:
        login_host: "{{ target_db_instance }}"
        login_user: "{{ db_username }}"
        login_password: "{{ db_password }}"
        db: "{{ target_db_name }}"
        query:
        - alter default privileges for user {{app_username}} grant select on tables to readonly;
        - alter default privileges for user {{app_username}} grant usage on sequences to readonly;
        - alter default privileges for user {{app_username}} grant usage on types to readonly;
        - alter default privileges for user {{ app_username }} grant select,insert,update,delete on tables to readwrite
        - alter default privileges for user {{ app_username }} grant all privileges on sequences to readwrite
        - alter default privileges for user {{ app_username }} grant execute on functions to readwrite
        - alter default privileges for user {{ app_username }} grant usage on types to readwrite
        - grant {{ app_username }} to dba
        - revoke {{ app_username }} from rxadmin
        named_args:
          app_username: "{{ app_username }}"        

