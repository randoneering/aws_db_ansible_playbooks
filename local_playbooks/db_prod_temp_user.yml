---
- name: Temp user for production writes
  hosts: localhost
  vars_prompt:
    - name: db_host
      prompt: What database instance is this for (include DNS name or RDS Endpoint)
      private: false

    - name: db_type
      prompt: Is this for postgres, mysql, or docdb?
      private: false

    - name: database
      prompt: What is the target database?
      private: false

    - name: requested_by
      prompt: Who requested the temp user?
      private: false

    - name: email
      prompt: What is the user's email?
      private: false

    - name: ticket
      prompt: What is theticket?
      private: false
  vars_files: 
    - ./external_vars/secrets/secrets.yml
    - ./external_vars/general.yml
  tasks: 
    - name: Generate password tempuser_rw
      ansible.builtin.set_fact:
        user_rw_pass: "{{ lookup('community.general.random_string', special=false, numbers=true, length=20) }}"
      no_log: true

    - name: Create temp user for mysql (query method)
      community.mysql.mysql_query:
        login_host: "{{ db_host }}"
        login_user: "{{ db_username }}"
        login_password: "{{ db_password }}"
        query:
          - SET @user_count = (SELECT COUNT(*) FROM mysql.user WHERE user like 'tempuser%' and host = '{{ item.host }}');
          - SET @username = IF(@user_count = 0, CONCAT('tempuser_rw@','''{{ item.host }}'''), CONCAT('tempuser',@user_count + 1,'_rw','@','''{{ item.host }}'''));
          - SET @create_user = CONCAT("CREATE USER IF NOT EXISTS"," ",@username," ","IDENTIFIED by"," ","'{{ user_rw_pass }}'");
          - SET @grant_usage = CONCAT("GRANT USAGE on *.* to"," ",@username);
          - SET @grant_rights = CONCAT("GRANT SELECT, INSERT, UPDATE, DELETE, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, SHOW VIEW on `{{ database }}`.* to"," ",@username);
          - prepare create_tempuser from @create_user;
          - execute create_tempuser;
          - prepare grant_usage from @grant_usage;
          - execute grant_usage;
          - prepare grant_rights from @grant_rights;
          - execute grant_rights;
          - select @username as username;
      with_items:
        - { host: "192.168.%"}
        - { host: "10.10.%"}
      when: db_type == "mysql" 
      register: mysql_results
      
    - name: Query mysql_results for username created
      set_fact:
        temp_user: "{{ mysql_results | json_query('results[0].query_result[11][0].username')}}" 
      when: db_type == "mysql"

    - name: Extract temp username
      set_fact:
        temp_username: "{{ temp_user | regex_replace('@.*', '') }}"
      when: db_type == "mysql"
     
    - name: Create tempuser_rw for Postgres
      community.postgresql.postgresql_query:
        login_host: "{{ db_host }}"
        login_user: "{{ db_username }}"
        login_password: "{{ db_password }}"
        db: "{{ database }}"
        query: 
          - CREATE OR REPLACE FUNCTION create_tempuser()
            RETURNS TEXT AS $$
            DECLARE
              user_count INTEGER;
              username TEXT;
            BEGIN
              user_count := (SELECT COUNT(*) FROM pg_user WHERE usename LIKE 'tempuser%');
              username := CASE user_count WHEN 0 THEN 'tempuser_rw' ELSE 'tempuser' || user_count + 1 || '_rw' END;
              EXECUTE format('CREATE USER %I WITH PASSWORD ''{{ user_rw_pass }}''', username);
              EXECUTE format('GRANT readwrite TO %I', username);
              RETURN username;
            END; $$
            LANGUAGE plpgsql;
          - select create_tempuser();
      when: db_type == "postgres"
      register: postgres_results

    - name: Query Results for Username
      set_fact: 
        temp_username: "{{ postgres_results | json_query('query_result[0].create_tempuser')}}"
      when: db_type == "postgres"
    
    - name: Create tempuser for DocumentDB
      community.mongodb.mongodb_shell:
        login_host: "{{ db_host }}"
        login_user: "{{ db_username }}"
        login_password: "{{ db_password }}"
        login_port: 27017
        ssl: true
        ssl_ca_certs: /path/to/your/cert
        stringify: false
        eval: |
          function createTempUser(password,database) {
            let count = '1';
            while (db.getUser(`tempuser_rw${count}`) != null) {
              count++;
            }
            const tempuserName = `tempuser_rw${count}`
            db.createUser({
              "user": tempuserName,
              "pwd": password,
              "roles": [{ role: "readWrite", db: database }]
            });
            return tempuserName;
          };
          createTempUser("{{ user_rw_pass }}","{{ database }}")
      when: db_type == "docdb"
      register: docdb_results

    - name: Query Results for Username
      set_fact: 
        temp_username: "{{ docdb_results | json_query('transformed_output[0]')}}"
      when: db_type == "docdb"

    - name: Send email with credentials tempuser
      community.general.mail:
        host: you.smtp.server
        port: 25
        to: "{{ email }}"
        from: service@randoneering.tech
        subject: 'Credentials for temp user request in {{ ticket }}'
        body: |
          credentials for {{ ticket }}
          user: {{ temp_username }}
          password: {{ user_rw_pass }}
          db_host: {{ db_host }}
      delegate_to: localhost

    - name: Alert team about tempuser creation (email)
      community.general.mail:
        host: you.smtp.server
        port: 25
        to: service@randoneering.tech
        from: service@randoneering.tech
        subject: 'Tempuser created for {{ requested_by }} in {{ ticket }}'
        body: |
          {{ temp_username }} was created for {{ requested_by }}, on {{ db_host }}. This will be dropped at XXam tomorrow by a scheduled ansible-playbook
      delegate_to: localhost

    - name: Alert team about tempuser creation (teams)
      community.general.mail:
        host: you.smtp.server
        port: 25
        to: "{{ channel_email }}"
        from: service@randoneering.tech
        subject: 'Tempuser created for {{ requested_by }} in {{ ticket }}'
        body: |
          {{ temp_username }} was created for {{ requested_by }}, on {{ db_host }}. This will be dropped at 2am CST tomorrow by a scheduled ansible-playbook
      delegate_to: localhost